{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/TodoForm.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","id","value","edit","setEdit","onSubmit","updateTodo","todos","map","todo","index","className","isComplete","onClick","completeTodo","text","removeTodo","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","console","log","prev","item","TodoForm","input","setInput","inputRef","useRef","useEffect","current","focus","e","preventDefault","Math","floor","random","type","placeholder","onChange","target","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c16f91f.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri'\r\nimport { TiEdit } from 'react-icons/ti'\r\n\r\nfunction Todo(props) {\r\n    const [edit,setEdit] = useState({\r\n        id:null,\r\n        value:\"\"\r\n    })\r\n\r\nconst submitUpdate = value =>{\r\n    \r\n   props.updateTodo(edit.id,value);\r\n    setEdit({\r\n        id:null,\r\n        value:\"\"\r\n    });\r\n};\r\n    if(edit.id){\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate}></TodoForm>\r\n    }\r\n   return props.todos.map((todo,index) =>(\r\n       <div className={todo.isComplete ? 'todo-row complete':'todo-row'} key={index}>\r\n           <div key={todo.id} onClick={() => props.completeTodo(todo.id)}>{todo.text}</div>\r\n           <div className=\"icons\">\r\n               <RiCloseCircleLine onClick={() => props.removeTodo(todo.id)} className=\"delete-icon\" />\r\n               <TiEdit onClick={() => setEdit({id:todo.id,value:todo.text}) } className=\"edit-icon\"/>\r\n            </div>\r\n       </div>\r\n   ));\r\n}\r\n\r\nexport default Todo;","import React ,{useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\nfunction TodoList(props) {\r\n    const [todos,setTodos]=useState([]);\r\n    const addTodo = todo =>{\r\n        if(!todo.text || /^\\s*$/.test(todo.text)){\r\n            return ;\r\n        }\r\n        const newTodos =[todo,...todos]\r\n        setTodos(newTodos);\r\n\r\n    }\r\n\r\n    const updateTodo = (todoId, newValue)=>{\r\n        console.log(todoId , newValue);\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\r\n            return ;\r\n        }\r\n        \r\n        setTodos(prev=> prev.map(item =>(item.id === todoId ? newValue : item)));\r\n    }\r\n    const removeTodo = id =>{\r\n        const removeArr = [...todos].filter(todo =>todo.id !== id);\r\n        setTodos(removeArr);\r\n    }\r\n    const completeTodo = id =>{\r\n        let updatedTodos = todos.map( todo => {\r\n            if(todo.id === id ){\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        })\r\n        setTodos(updatedTodos);\r\n    }\r\n   \r\n    return (\r\n        <div className=\"todo-app\">\r\n            <h1>Whats's your Plan Today?</h1>   \r\n            <TodoForm onSubmit={addTodo}></TodoForm> \r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}></Todo>        \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, { useState ,useEffect,useRef} from 'react';\r\nimport TodoList from './TodoList';\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value: \"\");\r\n\r\n    const inputRef = useRef(null);\r\n    useEffect( () =>{\r\n        inputRef.current.focus();\r\n    });\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        props.onSubmit({\r\n            id:Math.floor(Math.random()*1000),\r\n            text:input\r\n        });\r\n        setInput(\"\");\r\n    }\r\n    return (\r\n            <form onSubmit={handleSubmit}>\r\n                {\r\n                    props.edit? (\r\n                    <div className=\"todo-form\">\r\n                        <input type=\"text\" placeholder=\"Add Todo\" className=\"todo-input\" value={input} onChange={(e) => setInput(e.target.value)} ref={inputRef}></input>\r\n                        <button type=\"submit\" className=\"todo-button update-button\">Update</button>\r\n                    </div>\r\n                    ):\r\n                    (\r\n                    <div className=\"todo-form\">\r\n                        <input type=\"text\" placeholder=\"Add Todo\" className=\"todo-input\" value={input} onChange={(e) => setInput(e.target.value)} ref={inputRef}></input>\r\n                        <button type=\"submit\" className=\"todo-button\">Add</button>\r\n                    </div>\r\n                    )\r\n                }\r\n                \r\n            </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;","import './App.css';\nimport React from 'react';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nfunction App() {\n  return (\n    <div>\n      <TodoList></TodoList>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}